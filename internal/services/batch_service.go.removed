package batch

import (
	"context"
	"fmt"
	"os"
	"strings"
	"time"

	"github.com/LaurieRhodes/mcp-cli-go/internal/core/batch"
	"github.com/LaurieRhodes/mcp-cli-go/internal/domain"
	"github.com/LaurieRhodes/mcp-cli-go/internal/infrastructure/logging"
)

// Service orchestrates batch processing operations
type Service struct {
	manager           *batch.Manager
	config            *domain.ApplicationConfig
	configService     domain.ConfigurationService
	providerService   domain.LLMProvider
	serverManager     domain.MCPServerManager
	templateManager   *batch.TemplateManager
}

// NewService creates a new batch service
func NewService(
	config *domain.ApplicationConfig,
	configService domain.ConfigurationService,
	providerService domain.LLMProvider,
	serverManager domain.MCPServerManager,
) (*Service, error) {
	// Validate that batch mode is enabled
	if config.BatchMode == nil || !config.BatchMode.Enabled {
		return nil, domain.NewDomainError(domain.ErrCodeConfigInvalid, "batch mode not enabled in configuration")
	}
	
	// Create batch manager
	manager := batch.NewManager(config.BatchMode, providerService, serverManager)
	
	// Validate batch configuration
	if err := manager.ValidateConfig(); err != nil {
		return nil, fmt.Errorf("batch configuration validation failed: %w", err)
	}
	
	// Create template manager
	validator := batch.NewValidator(config.BatchMode.Security)
	templateManager := batch.NewTemplateManager(config.BatchMode.Templates, validator)
	
	// Validate all templates
	if err := templateManager.ValidateAllTemplates(); err != nil {
		return nil, fmt.Errorf("template validation failed: %w", err)
	}
	
	logging.Info("Batch service initialized successfully")
	
	return &Service{
		manager:         manager,
		config:          config,
		configService:   configService,
		providerService: providerService,
		serverManager:   serverManager,
		templateManager: templateManager,
	}, nil
}

// ExecuteBatch executes a batch operation
func (s *Service) ExecuteBatch(ctx context.Context, templateName string) (*domain.BatchResponse, error) {
	startTime := time.Now()
	logging.Info("Starting batch execution with template: %s", templateName)
	
	// 1. Detect input from stdin
	processor := batch.NewProcessor(s.config.BatchMode)
	inputData, err := processor.DetectInput()
	if err != nil {
		logging.Error("Failed to detect input: %v", err)
		return nil, fmt.Errorf("input detection failed: %w", err)
	}
	
	logging.Debug("Input detected: %d bytes", len(inputData))
	
	// 2. Determine which template to use and get configuration
	var template *domain.BatchTemplate
	var basePrompt string
	var switches []string
	
	if templateName != "" {
		// Use specific template
		template, err = s.templateManager.GetTemplate(templateName)
		if err != nil {
			logging.Error("Failed to get template '%s': %v", templateName, err)
			return nil, fmt.Errorf("template retrieval failed: %w", err)
		}
		
		// Process template variables if any
		template = s.templateManager.ProcessTemplateVariables(template, nil)
		
		basePrompt = template.BasePrompt
		switches = template.Switches
		
		logging.Info("Using template '%s' with prompt: %.100s...", templateName, basePrompt)
	} else {
		// Use default configuration
		basePrompt = s.config.BatchMode.BasePrompt
		switches = s.config.BatchMode.Switches
		
		logging.Info("Using default batch configuration")
	}
	
	// 3. Sanitize input if security settings require it
	if inputData != "" {
		inputData = processor.SanitizeInput(inputData)
	}
	
	// 4. Create batch request with string-formatted time values
	req := &domain.BatchRequest{
		BasePrompt: basePrompt,
		InputData:  inputData,
		Switches:   switches,
		Template:   templateName,
		Metadata: map[string]interface{}{
			"execution_start": startTime.Format(time.RFC3339),  // Convert to string
			"template_used":   templateName,
			"input_detected":  inputData != "",
			"input_size":      len(inputData),
		},
	}
	
	// 5. Process the batch request
	response, err := s.manager.ProcessBatch(ctx, req)
	if err != nil {
		logging.Error("Batch processing failed: %v", err)
		return nil, fmt.Errorf("batch processing failed: %w", err)
	}
	
	// 6. Add service-level metadata with string-formatted duration
	if response.Metadata == nil {
		response.Metadata = make(map[string]interface{})
	}
	response.Metadata["service_execution_time"] = time.Since(startTime).String()  // Convert to string
	response.Metadata["switches_applied"] = switches
	
	logging.Info("Batch execution completed successfully in %v", time.Since(startTime))
	return response, nil
}

// ExecuteBatchWithConfig executes batch processing with custom configuration
func (s *Service) ExecuteBatchWithConfig(ctx context.Context, config *BatchExecutionConfig) (*domain.BatchResponse, error) {
	if config == nil {
		return nil, fmt.Errorf("batch execution config is nil")
	}
	
	logging.Info("Starting batch execution with custom config")
	
	// Create batch request from config
	req := &domain.BatchRequest{
		BasePrompt:  config.BasePrompt,
		InputData:   config.InputData,
		Switches:    config.Switches,
		Template:    config.TemplateName,
		ExecutionID: config.ExecutionID,
		Metadata:    config.Metadata,
	}
	
	return s.manager.ProcessBatch(ctx, req)
}

// ListTemplates returns all available template names
func (s *Service) ListTemplates() []string {
	return s.templateManager.ListTemplates()
}

// GetTemplateInfo returns detailed information about a template
func (s *Service) GetTemplateInfo(templateName string) (map[string]interface{}, error) {
	return s.templateManager.GetTemplateInfo(templateName)
}

// ValidateConfiguration validates the batch configuration
func (s *Service) ValidateConfiguration() error {
	return s.manager.ValidateConfig()
}

// GetMetrics returns current batch processing metrics
func (s *Service) GetMetrics() *domain.BatchMetrics {
	return s.manager.GetMetrics()
}

// CheckStdinInput checks if there is input available on stdin
func (s *Service) CheckStdinInput() (bool, error) {
	stat, err := os.Stdin.Stat()
	if err != nil {
		return false, fmt.Errorf("failed to stat stdin: %w", err)
	}
	
	// Check if stdin is a pipe or regular file (not a terminal)
	hasInput := (stat.Mode() & os.ModeCharDevice) == 0
	return hasInput, nil
}

// GetBatchConfiguration returns the current batch configuration
func (s *Service) GetBatchConfiguration() *domain.BatchModeConfig {
	return s.config.BatchMode
}

// BatchExecutionConfig represents configuration for a batch execution
type BatchExecutionConfig struct {
	BasePrompt   string                 `json:"base_prompt"`
	InputData    string                 `json:"input_data"`
	Switches     []string               `json:"switches"`
	TemplateName string                 `json:"template_name"`
	ExecutionID  string                 `json:"execution_id"`
	Metadata     map[string]interface{} `json:"metadata"`
}

// ProcessEnvironmentVariables processes environment variables in batch configuration
func (s *Service) ProcessEnvironmentVariables(text string) string {
	// Simple environment variable substitution
	// Supports ${VAR} and $VAR formats
	result := text
	
	// Process ${VAR} format
	for {
		start := strings.Index(result, "${")
		if start == -1 {
			break
		}
		
		end := strings.Index(result[start:], "}")
		if end == -1 {
			break
		}
		end += start
		
		if end > start+2 {
			varName := result[start+2 : end]
			envValue := os.Getenv(varName)
			result = result[:start] + envValue + result[end+1:]
		} else {
			break
		}
	}
	
	return result
}

// CreateExecutionSummary creates a summary of the batch execution
func (s *Service) CreateExecutionSummary(response *domain.BatchResponse) map[string]interface{} {
	summary := map[string]interface{}{
		"execution_id":     response.ExecutionID,
		"timestamp":        response.Timestamp.Format(time.RFC3339),  // Convert to string
		"status":           response.Status,
		"time_taken":       response.TimeTaken.String(),              // Convert to string
		"content_length":   len(response.Content),
		"tool_calls_count": len(response.ToolCalls),
	}
	
	if response.Usage != nil {
		summary["tokens_used"] = map[string]interface{}{
			"prompt_tokens":     response.Usage.PromptTokens,
			"completion_tokens": response.Usage.CompletionTokens,
			"total_tokens":      response.Usage.TotalTokens,
		}
	}
	
	if response.Error != nil {
		summary["error"] = map[string]interface{}{
			"code":    response.Error.Code,
			"message": response.Error.Message,
		}
	}
	
	if response.Provider != "" {
		summary["provider"] = response.Provider
	}
	
	if response.Model != "" {
		summary["model"] = response.Model
	}
	
	return summary
}

// GetAvailableTools returns tools available for batch processing
func (s *Service) GetAvailableTools(ctx context.Context) ([]domain.Tool, error) {
	if s.serverManager == nil {
		return []domain.Tool{}, nil
	}
	
	tools, err := s.serverManager.GetAvailableTools()
	if err != nil {
		return nil, fmt.Errorf("failed to get available tools: %w", err)
	}
	
	return tools, nil
}

// GetRunningServers returns the names of currently running servers
func (s *Service) GetRunningServers() []string {
	if s.serverManager == nil {
		return []string{}
	}
	
	servers := s.serverManager.ListServers()
	names := make([]string, 0, len(servers))
	
	for name := range servers {
		names = append(names, name)
	}
	
	return names
}

// ExecuteBatchDryRun performs a dry run without actually executing the LLM request
func (s *Service) ExecuteBatchDryRun(ctx context.Context, templateName string) (*BatchDryRunResult, error) {
	logging.Info("Starting batch dry run with template: %s", templateName)
	
	// Detect input
	processor := batch.NewProcessor(s.config.BatchMode)
	inputData, err := processor.DetectInput()
	if err != nil {
		return nil, fmt.Errorf("input detection failed: %w", err)
	}
	
	// Get template or default config
	var template *domain.BatchTemplate
	var basePrompt string
	var switches []string
	
	if templateName != "" {
		template, err = s.templateManager.GetTemplate(templateName)
		if err != nil {
			return nil, fmt.Errorf("template retrieval failed: %w", err)
		}
		template = s.templateManager.ProcessTemplateVariables(template, nil)
		basePrompt = template.BasePrompt
		switches = template.Switches
	} else {
		basePrompt = s.config.BatchMode.BasePrompt
		switches = s.config.BatchMode.Switches
	}
	
	// Construct prompt
	req := &domain.BatchRequest{
		BasePrompt: basePrompt,
		InputData:  inputData,
		Switches:   switches,
		Template:   templateName,
	}
	
	finalPrompt, err := processor.ConstructPrompt(req)
	if err != nil {
		return nil, fmt.Errorf("prompt construction failed: %w", err)
	}
	
	// Get available tools
	tools, err := s.GetAvailableTools(ctx)
	if err != nil {
		logging.Warn("Failed to get available tools: %v", err)
		tools = []domain.Tool{}
	}
	
	// Create dry run result
	result := &BatchDryRunResult{
		TemplateName:   templateName,
		BasePrompt:     basePrompt,
		InputData:      inputData,
		FinalPrompt:    finalPrompt,
		Switches:       switches,
		AvailableTools: tools,
		ToolCount:      len(tools),
		InputSize:      len(inputData),
		PromptSize:     len(finalPrompt),
		Metadata: map[string]interface{}{
			"dry_run":        true,
			"template_used":  templateName,
			"input_detected": inputData != "",
		},
	}
	
	logging.Info("Batch dry run completed - would execute prompt of %d characters with %d tools available", 
		len(finalPrompt), len(tools))
	
	return result, nil
}

// BatchDryRunResult represents the result of a batch dry run
type BatchDryRunResult struct {
	TemplateName   string                 `json:"template_name"`
	BasePrompt     string                 `json:"base_prompt"`
	InputData      string                 `json:"input_data"`
	FinalPrompt    string                 `json:"final_prompt"`
	Switches       []string               `json:"switches"`
	AvailableTools []domain.Tool          `json:"available_tools"`
	ToolCount      int                    `json:"tool_count"`
	InputSize      int                    `json:"input_size"`
	PromptSize     int                    `json:"prompt_size"`
	Metadata       map[string]interface{} `json:"metadata"`
}
